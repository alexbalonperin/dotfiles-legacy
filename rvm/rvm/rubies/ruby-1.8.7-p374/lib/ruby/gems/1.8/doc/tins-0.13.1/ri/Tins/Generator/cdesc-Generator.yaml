--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: "[]"
- !ruby/object:RI::MethodSummary 
  name: new
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: This class can create generator objects, that can produce all tuples, that would be created by as many for-loops as dimensions were given.
- !ruby/struct:SM::Flow::P 
  body: The generator
- !ruby/struct:SM::Flow::VERB 
  body: " g = Tins::Generator[1..2, %w[a b c]]\n"
- !ruby/struct:SM::Flow::P 
  body: produces
- !ruby/struct:SM::Flow::VERB 
  body: " g.to_a # =&gt; [[1, &quot;a&quot;], [1, &quot;b&quot;], [1, &quot;c&quot;], [2, &quot;a&quot;], [2, &quot;b&quot;], [2, &quot;c&quot;]]\n"
- !ruby/struct:SM::Flow::P 
  body: The 'each' method can be used to iterate over the tuples
- !ruby/struct:SM::Flow::VERB 
  body: " g.each { |a, b| puts &quot;#{a} #{b}&quot; }\n"
- !ruby/struct:SM::Flow::P 
  body: "and Tins::Generator includes the Enumerable module, so Enumerable.instance_methods can be used as well:"
- !ruby/struct:SM::Flow::VERB 
  body: " g.select { |a, b| %w[a c].include? b  } # =&gt; [[1, &quot;a&quot;], [1, &quot;c&quot;], [2, &quot;a&quot;], [2, &quot;c&quot;]]\n"
constants: []

full_name: Tins::Generator
includes: 
- !ruby/object:RI::IncludedModule 
  name: Enumerable
- !ruby/object:RI::IncludedModule 
  name: Enumerable
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: add_dimension
- !ruby/object:RI::MethodSummary 
  name: add_dimension
- !ruby/object:RI::MethodSummary 
  name: each
- !ruby/object:RI::MethodSummary 
  name: each
- !ruby/object:RI::MethodSummary 
  name: size
- !ruby/object:RI::MethodSummary 
  name: size
name: Generator
superclass: Object
